" Look into
"
"
" " Autocompletion menu on Ctrl + P in insert mode 
" set completeopt=menu
" 
" get ctrl+delete to delete words in front of cursor
" cmap Q<Enter> :q<Enter>

" ----------------------------------------------------------------------------
"
"                          Important to be at the top
"
" -----------------------------------------------------------------------------

set nocompatible	" Prevents vim from defaulting to certin Vi defaults which break things

" ----------------------------------------------------------------------------
"
"                               Generic Settings
"
" -----------------------------------------------------------------------------

"  Mouse Options
set mouse+=a      " click and drag selets text in visual mode

" Line Numbers
set number

" Show (partial) command in status line
set showcmd

" sets tabs to 2 spaces
set tabstop=2          

" Allows 5 lines at the top and bottom of the screen before screen moves
set scrolloff=5

" Highlight lines which are longer than 80 characters (for c files only) in red 
" to prompt shortening
if has("autocmd")
  autocmd BufRead *.c match ErrorMsg '\%>80v.\+'
endif " has("autocmd")

" Custom Key Bindings - https://vim.fandom.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)
map <F2> :Vexplore<Enter>        " opens a new explore window vertically
map <F3> :Hexplore<Enter>        " opens a new explore window horizonally
map <F4> :Rexplore<Enter>        " reopens an explore window, use ':Explore' if no previous

map <F5> :bp<Enter>              " previous open buffer
map <F6> :bn<Enter>              " next open buffer
map <F7> :b# \| bd # <Enter>     " move to previous buffer, close current one

" Tap ESC to clear search highlighting in NORMAL mode
set timeoutlen=0 " Prevent ESC key sticking around after being pressd
nnoremap <TAB> :noh<Enter>
" nnoremap <ESC> :noh <Enter> - Seems to break things atm

" Mintty can send '' or '' to the terminal when ctrl + backspace are pressed.
" This maps the ctrl + backspace to delete the previous word in both 
" NORMAL and INSERT mode. 
"map  db
"imap  <C-W>
"map  db
"imap  <C-W>

" Writes the file automatically (i.e. when using ctags to move between files)
set autowrite
set autoread

" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Smarter searching
set ignorecase
set smartcase

" highlights as you type out your search
set hlsearch
set incsearch 

" ------- Things stolen from Sam
" Autocomplete bar in commandline etc
set wildmenu 
" So what if I quit/save when I have caps lock on...
command! Q q
command! Qa qa
command! W w
command! WQ wq
command! Wq wq


" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"
"                        Toggle Settings on HOSTNAME
"
" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let hostname = substitute(system('hostname'), '\n', '', '')
if hostname == "daspro1"
 
 "                      Plugins Specific Stuff (Vundle)
 "
 " -----------------------------------------------------------------------------
 filetype off      " Required by Vundle
 set rtp+=~/.vim/bundle/Vundle.vim
 call vundle#begin()
 
 Plugin 'VundleVim/Vundle.vim'
 
 " PLUGINS START
 Plugin 'ajh17/VimCompletesMe'         " Tab autocomplete
 Plugin 'jlfwong/vim-mercenary'        " HGblame to see who and when a change was made
 Plugin 'justinmk/vim-syntax-extra'    " Super Syntax Highlighting
 Plugin 'morhetz/gruvbox'              " Colours
 Plugin 'vim-scripts/fitnesse.vim'     " Fitnesse syntax highlighting
 Plugin 'ctags.vim--Johnson'           " Display function name in the status bar
 " PLUGINS END
 
 call vundle#end()            " required
 filetype plugin indent on    " required
 
 
 "                     	Settings due to using Plugins
 "
 " -----------------------------------------------------------------------------
 
 " ajh17/VimCompletesMe
 let g:completekey = "<Insert>" " Move gcompletekey to get tab complete working
 set completeopt=longest,menuone " Autocomplete - not a plugin setting?
                                 " longest - Only inserts longest common text
                                 "           of the matches
                                 " menuone - Displays popup menu, even when
                                 "           there is only a single match

 " justinmk/vim-syntax-extra
 syntax enable
 
 " mohertz/gruvbox
 colorscheme gruvbox
 let g:gruvbox_contrast_dark = 'hard'
 set background=dark
 
 " vim-scripts/fitnesse.vim
 au BufNewFile,BufRead *.wiki set ft=fitnesse

 " ctags.vim--Johnson
 let g:ctags_statusline=1   " To show tag name in status line.
 let generate_tags=1

 "                          	Non-Plugin Settings
 "
 " -----------------------------------------------------------------------------
 highlight cursorline cterm=bold guibg=#282828
 highlight LineNr guibg=#282828
 
 
 set termguicolors " requires vim Version 8.X

else

 set t_Co=256
 colorscheme desert
 syntax enable

 highlight Search cterm=bold ctermfg=256 ctermbg=214

 highlight LineNr ctermbg=236
 highlight CursorLine cterm=bold ctermbg=236
 highlight CursorLineNr cterm=bold ctermbg=236

endif

 " Needs to be below colourscheme
 set cursorline


" ----------------------------------------------------------------------------
"
"                                     DAI
"
" -----------------------------------------------------------------------------

set showmatch     " When a bracket is inserted, briefly shows matching bracket
set cindent       " Automatic C program indenting (set by 'shiftwidth')
set shiftwidth=2  " Number of spaces to indent automatically
set expandtab     " <Tab> inserts spaces rather than a real tab
set ruler         " Shows the current cursor position within file in statusline
set complete=.,w,b,u,t  " Complete options
                   " .	scan the current buffer
                   " w	scan buffers from other windows
                   " b	scan other loaded buffers
                   " u	scan the unloaded buffers
                   " t	tag completion

" Not really sure what they do yet...
set noautoindent
set backspace=2  " Backspace, current setting of 2 is archaic, change

" Use grep to search for term under cursor Ctrl + F
map <C-F> :!grep -n <Cword> *.c *.h > .vimfind<CR> :10sp .vimfind<CR> <C-W>r<CR>

if has("folding")
  set foldmethod=indent
  set foldlevel=99
endif " has("folding")

map <F8> :!ut_ctags<CR>
map! <F8> <ESC>:!ut_ctags<CR>
set tags=~/source/.tags,./tags,./TAGS,tags,TAGS,.tags,~/.tags,~/.TAGS

if has("autocmd")

  autocmd BufRead *.plugin set filetype=plugin
  autocmd BufRead sdf.txt set filetype=sdf
  autocmd BufRead df_alias.txt set filetype=df_alias
  autocmd BufRead df_proj_alias.txt set filetype=df_alias
  autocmd BufRead *.menu_config set filetype=datascript
  autocmd BufRead *.screen_settings set filetype=datascript
  autocmd BufRead *.settings set filetype=datascript
  autocmd BufRead *.mds set filetype=datascript

endif " has("autocmd")

" -----------------------------------------------------------------------------
"
"                               Functions
"
" -----------------------------------------------------------------------------

" Removes trailing whitespace from file
func! RemoveTrailingWhitespace()
  s/ *$//
endfu

" Calling FormatJson() turns horrendous json files into somewhat readable files
func! FormatJson()
  silent %!python -m json.tool
endfu

" Python specific settings
func! PythonSettings()
  set textwidth=79  " lines longer than 79 columns will be broken
  set shiftwidth=4  " operation >> indents 4 columns; << unindents 4 columns
  set tabstop=4     " a hard TAB displays as 4 columns
  set expandtab     " insert spaces when hitting TABs
  set softtabstop=4 " insert/delete 4 spaces when hitting a TAB/BACKSPACE
  set shiftround    " round indent to multiple of 'shiftwidth'
  set autoindent    " align the new line indent with the previous line
endfu

if has("autocmd")
  autocmd BufNewFile,BufRead *.json call FormatJson()
  autocmd BufNewFile,BufRead *.py call PythonSettings()
endif

map <F9> :call RemoveTrailingWhitespace()<CR>
